require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe ProjectsController do
	login_user

	describe "GET #index" do
		it "populates an array of projects" do
			project = create(:project)
			get :index
			assigns(:projects).should eq([project])
		end

		it "renders the :index view" do
			get :index
			response.should render_template :index
		end
	end

	describe "GET #show" do
		it "assigns the requested project to @project" do
			project = create(:project)
			get :show, id: project
			assigns(:project).should eq(project)
		end

		it "renders the :show view" do
			get :show, id: create(:project)
			response.should render_template :show
		end
	end

	describe "POST create" do
		context "with valid attributes" do
			it "create a new project" do
				expect{
					post :create, project: attributes_for(:project)
				}.to change(Project, :count).by(1)
			end

			it "redirects to the new project" do
				post :create, project: attributes_for(:project)
				response.should redirect_to Project.last
			end
		end

		context "with invalid attributes" do
			it "does not save the new project" do
				expect{
					post :create, project: attributes_for(:invalid_project)
				}.to_not change(Project, :count)
			end

			it "re-renders the new method" do
				post :create, project: attributes_for(:invalid_project)
				response.should render_template :new
			end
		end
	end

	describe "Patch update" do
		before :each do 
			@project = create(:init_project)
		end

		context "valid attributes" do
			it "located the requested @project" do
				patch :update, id: @project, project: attributes_for(:project)
				assigns(:project).should eq(@project)
			end

			it "changes @project's attributes" do
				patch :update, id: @project,
					project: attributes_for(:project, name: "Study Planner")
				@project.reload
				@project.name.should eq("Study Planner")
			end

			it "redirects to the update project" do
				patch :update, id: @project, project: attributes_for(:project)
				response.should redirect_to @project
			end
		end
	end

	describe "DELETE destroy" do
		before :each do 
			@project = create(:project)
		end

		it "deletes the project" do
			expect{
				delete :destroy, id: @project
			}.to change(Project, :count).by(-1)
		end

		it "redirects to projects#index" do
			delete :destroy, id: @project
			response.should redirect_to projects_url
		end
	end
end
